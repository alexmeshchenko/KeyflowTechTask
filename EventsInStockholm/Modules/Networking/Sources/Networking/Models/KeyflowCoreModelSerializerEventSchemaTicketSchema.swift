//
// KeyflowCoreModelSerializerEventSchemaTicketSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct KeyflowCoreModelSerializerEventSchemaTicketSchema: Codable {

    /** The booking fee per ticket. In cents. */
    public var bookingFee: Int?
    /** Ticket guest list RGB representation. */
    public var color: String?
    /** The ticket currency. */
    public var currency: String?
    public var description: String?
    /** If this is a drinktable, this is a reference to the drink table id setup in the venue. */
    public var drinkTableId: Int?
    /** Flags whether ticket is available for purchase. */
    public var enabled: Bool?
    public var extraParameters: KeyflowCoreModelSerializerDrinktableSchemaDrinkTableExtraParametersSchema?
    public var guestListId: Int?
    /** Deprecated. */
    public var guestPlus: Double?
    public var id: Int?
    public var lastEntryTime: String?
    /** The ticket price in cents. */
    public var price: Int?
    /** The ticket price without tax in cents. */
    public var priceBeforeTax: Int?
    /** The amount of tax per ticket in cents. */
    public var priceTax: Int?
    /** The number of tickets put out for sale. */
    public var quantity: Int?
    /** Flags whether this ticket has been sold out or if there are any tickets lets */
    public var soldOut: Bool?
    /** Tax display name. */
    public var taxName: String?
    /** Tax amount (%). */
    public var taxRatio: Float?
    /** Tax settings. This controls how we display and charge tax on purchases. */
    public var taxStrategy: String?
    /** The number of tickets sold to this date. */
    public var ticketsSold: Int?
    public var title: String?
    /** The total price for this ticket in cents (price + bookingfee). This is the amount a guest is charged per ticket. */
    public var totalPrice: Int?
    /** Ticket type. (type &#39;campaign&#39; has been deprecated.) */
    public var type: String?
    /** Flags whether VIP card holders go for free. */
    public var vipFreeEntry: Bool?

    public init(bookingFee: Int? = nil, color: String? = nil, currency: String? = nil, description: String? = nil, drinkTableId: Int? = nil, enabled: Bool? = nil, extraParameters: KeyflowCoreModelSerializerDrinktableSchemaDrinkTableExtraParametersSchema? = nil, guestListId: Int? = nil, guestPlus: Double? = nil, id: Int? = nil, lastEntryTime: String? = nil, price: Int? = nil, priceBeforeTax: Int? = nil, priceTax: Int? = nil, quantity: Int? = nil, soldOut: Bool? = nil, taxName: String? = nil, taxRatio: Float? = nil, taxStrategy: String? = nil, ticketsSold: Int? = nil, title: String? = nil, totalPrice: Int? = nil, type: String? = nil, vipFreeEntry: Bool? = nil) {
        self.bookingFee = bookingFee
        self.color = color
        self.currency = currency
        self.description = description
        self.drinkTableId = drinkTableId
        self.enabled = enabled
        self.extraParameters = extraParameters
        self.guestListId = guestListId
        self.guestPlus = guestPlus
        self.id = id
        self.lastEntryTime = lastEntryTime
        self.price = price
        self.priceBeforeTax = priceBeforeTax
        self.priceTax = priceTax
        self.quantity = quantity
        self.soldOut = soldOut
        self.taxName = taxName
        self.taxRatio = taxRatio
        self.taxStrategy = taxStrategy
        self.ticketsSold = ticketsSold
        self.title = title
        self.totalPrice = totalPrice
        self.type = type
        self.vipFreeEntry = vipFreeEntry
    }

}
